name: Build utelnetd Standalone Binary

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
    tags:
      - 'v*.*.*'  # Trigger on tags like v1.0.0
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install necessary dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev libssl-dev ccache git zstd

      # Step 3: Download and extract OpenWRT SDK
      - name: Download OpenWRT SDK
        run: |
          wget -q https://downloads.openwrt.org/snapshots/targets/ramips/mt7621/openwrt-sdk-ramips-mt7621_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          unzstd openwrt-sdk-ramips-mt7621_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          tar -xf openwrt-sdk-ramips-mt7621_gcc-13.3.0_musl.Linux-x86_64.tar
          echo "OPENWRT_SDK_DIR=$(pwd)/openwrt-sdk-ramips-mt7621_gcc-13.3.0_musl.Linux-x86_64" >> $GITHUB_ENV

      # Step 4: Download and extract OpenWRT Toolchain
      - name: Download OpenWRT Toolchain
        run: |
          wget -q https://downloads.openwrt.org/snapshots/targets/ramips/mt7621/openwrt-toolchain-ramips-mt7621_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          unzstd openwrt-toolchain-ramips-mt7621_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          tar -xf openwrt-toolchain-ramips-mt7621_gcc-13.3.0_musl.Linux-x86_64.tar
          echo "TOOLCHAIN_DIR=$(pwd)/openwrt-toolchain-ramips-mt7621_gcc-13.3.0_musl.Linux-x86_64/toolchain-mipsel_24kc_gcc-13.3.0_musl/bin" >> $GITHUB_ENV

      # Step 5: Add Toolchain to PATH
      - name: Add Toolchain to PATH
        run: |
          echo "$TOOLCHAIN_DIR" >> $GITHUB_PATH

      # Step 6: Set Cross-Compiler Prefix
      - name: Set Cross-Compiler Prefix
        run: |
          echo "CROSS_PREFIX=mipsel-openwrt-linux-musl-" >> $GITHUB_ENV

      # Step 7: Verify Cross-Compiler Exists
      - name: Verify Cross-Compiler
        run: |
          echo "Verifying cross-compiler exists..."
          ls -la $TOOLCHAIN_DIR
          if [ ! -f "${TOOLCHAIN_DIR}/${CROSS_PREFIX}gcc" ]; then
            echo "Cross-compiler ${CROSS_PREFIX}gcc not found in TOOLCHAIN_DIR."
            exit 1
          fi
          echo "Cross-compiler found: $(which ${CROSS_PREFIX}gcc)"

      # Step 8: Compile utelnetd.c into standalone binary
      - name: Compile utelnetd.c
        run: |
          ${CROSS_PREFIX}gcc utelnetd.c -o utelnetd \
            -DSHELLPATH=\"/bin/ash\" \
            -Os \
            -ffunction-sections -fdata-sections \
            -Wl,--gc-sections \
            -fomit-frame-pointer \
            -flto

      # Step 9: Strip the binary to reduce size
      - name: Strip the utelnetd binary
        run: |
          ${CROSS_PREFIX}strip --strip-unneeded utelnetd

      # Step 10: Verify the binary
      - name: Verify Binary
        run: |
          echo "Verifying the compiled binary..."
          file utelnetd
          readelf -d utelnetd | grep NEEDED
          ls -lh utelnetd

      # Step 11: Upload the compiled binary as an artifact
      - name: Upload utelnetd Binary
        uses: actions/upload-artifact@v3
        with:
          name: utelnetd
          path: utelnetd

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: utelnetd
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
